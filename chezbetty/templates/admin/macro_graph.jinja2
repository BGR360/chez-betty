{% macro create_graph_panel(xs, ys, avg_hack, title) %}
<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">{{ title }}</h3>
  </div>
  <div class="panel-body">
    <canvas id="chart-{{ title|replace(" ", "") }}" height="400"></canvas>

<script>
  /*
  function* color_factory() {
    var i = 0;
    var colors = [
      //"rgba(151,187,205,1)",
      "rgba(56, 108, 176, 1)",  //"#386cb0",
      "rgba(127, 201, 127, 1)", //"#7fc97f",
      "rgba(240, 2, 127, 1)",   //"#f0027f",
      "rgba(255, 255, 153, 1)", //"#ffff99",
      "rgba(253, 192, 134, 1)", //"#fdc086",
      "rgba(190, 174, 212, 1)", //"#beaed4",
      ];
    while(true) {
      yield colors[i];
      i = (i + 1) % colors.length;
    }
  }
  */
  // Work around patchy generator support by emulating the interface
  function color_factory() {
    var r = function cf_int() {
    };

    r.next = function() {
      var colors = [
        "rgba(56, 108, 176, 1)",  //"#386cb0",
        "rgba(127, 201, 127, 1)", //"#7fc97f",
        "rgba(240, 2, 127, 1)",   //"#f0027f",
        "rgba(255, 255, 153, 1)", //"#ffff99",
        "rgba(253, 192, 134, 1)", //"#fdc086",
        "rgba(190, 174, 212, 1)", //"#beaed4",
        ];
      if (typeof this.idx == 'undefined') {
        this.idx = 0;
      }
      if (this.idx >= colors.length) {
        this.idx = 0;
      }
      this.idx += 1;
      var hack = {value: colors[this.idx-1]};
      return hack;
    };
    return r;
  }

  var cf1 = color_factory();
  var cf2 = color_factory();
  var cf3 = color_factory();
  var cf4 = color_factory();
  var data = {
    labels: {{ xs[0]|safe }},
    datasets: [
        {% for avg in avg_hack %}
        {
          strokeColor: cf3.next().value.replace(/[^,]+(?=\))/, '0.5'),
          pointColor:  "#fff",
          pointStrokeColor: "#fff",
          data: {{ avg }},
        },
        {% endfor %}
        {% for y in ys %}
        {
          strokeColor: cf1.next().value,
          pointColor:  cf2.next().value,
          pointStrokeColor: "#fff",
          data: {{ y }}
        },
        {% endfor %}
    ]
  };
  /*
  Average line hack explained:
    - Currently this graphing library only draws points+lines and requires all
      lines to have the same number of points
    - This makes drawing a second line (commented out below), not work
    - Instead, we just put a point of the same value at each label

  var avg_line = {
    labels: ['{{ xs[0] }}', '{{ xs[-1] }}'],
    datasets: [
      {
        data: [{{ avg }}, {{ avg }}],
      }
    ]
  };
  */
  var options = {

    ///Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines : true,

    //String - Colour of the grid lines
    //scaleGridLineColor : "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth : 1,

    //Boolean - Whether the line is curved between points
    bezierCurve : false,

    //Number - Tension of the bezier curve between points
    //bezierCurveTension : 0.4,

    //Boolean - Whether to show a dot for each point
    pointDot : true,

    //Number - Radius of each point dot in pixels
    pointDotRadius : 3,

    //Number - Pixel width of point dot stroke
    pointDotStrokeWidth : 1,

    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 2,

    //Boolean - Whether to show a stroke for datasets
    datasetStroke : true,

    //Number - Pixel width of dataset stroke
    datasetStrokeWidth : 2,

    //Boolean - Whether to fill the dataset with a colour
    datasetFill : false,

    //String - A legend template

  };

  function fitToContainer(canvas){
    canvas.style.width='100%';
    canvas.width  = canvas.offsetWidth;
  }

  var ctx = document.getElementById("chart-{{ title|replace(" ", "") }}").getContext("2d");
  fitToContainer(document.getElementById("chart-{{ title|replace(" ", "") }}"));
  var myChart = new Chart(ctx)
  var myLineChart = myChart.Line(data, options);
  /*
     More average hack:

     In my dreams, one could call Line multiple times to draw multiple lines.
     This is not how this works, instead, both lines must be packed into one
     call to Line()

  var myAvgChart = myChart.Line(avg_line, options);
  */
</script>
    </div>
</div>
{% endmacro %}



{% macro create_timeseries_panel(url, title) %}
<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">{{ title }}</h3>
  </div>
  <div class="panel-body">
    <div id="chart-{{ title|replace(" ", "") }}" style="width:100%; height:400px;"></canvas>

<script>
  $(function () {
    $.getJSON("{{ url }}", function (data) {

        // create the chart
        $('#chart-{{ title|replace(" ", "") }}').highcharts('StockChart', {
            chart: {
                alignTicks: true
            },

            rangeSelector: {
                inputEnabled: $('#chart-{{ title|replace(" ", "") }}').width() > 480,
                selected: 1
            },

            series: [{
                type: 'column',
                name: 'Number Sold',
                data: data.individual,
                yAxis: 1,
                dataGrouping: {
                    units: [
                    [
                        'minute',
                        [30]
                    ], [
                        'day',
                        [1]
                    ], [
                        'month',
                        [1]
                    ], [
                        'year',
                        [1]
                    ]],
                    approximation: "sum",
                    forced: true,
                    groupPixelWidth: 100
                }//,
                //gapSize: 2
            }, {
                type: 'line',
                name: 'Total Sold',
                data: data.sum,
                dataGrouping: {
                    units: [
                    [
                        'minute',
                        [30]
                    ], [
                        'day',
                        [1]
                    ], [
                        'month',
                        [1]
                    ], [
                        'year',
                        [1]
                    ]],
                    forced: true,
                    groupPixelWidth: 100
                }
            }],

            xAxis: {
                ordinal: false
            },

            yAxis: [{ // Primary yAxis
                labels: {
                    format: '{value}',
                    style: {
                        color: Highcharts.getOptions().colors[1]
                    }
                },
                title: {
                    text: 'Total Items Sold',
                    style: {
                        color: Highcharts.getOptions().colors[1]
                    }
                },
                opposite: true
            }, { // Secondary yAxis
                labels: {
                    format: '{value}',
                    style: {
                        color: Highcharts.getOptions().colors[0]
                    }
                },
                title: {
                    text: 'Items Sold',
                    style: {
                        color: Highcharts.getOptions().colors[0]
                    }
                },
                opposite: false
            }]
        });
    });
});
</script>
    </div>
</div>
{% endmacro %}

{% macro create_cumulative_timeseries_panel(url, title) %}
<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">{{ title }}</h3>
  </div>
  <div class="panel-body">
    <div id="chart-{{ title|replace(" ", "") }}" style="width:100%; height:400px;"></canvas>

<script>
  $(function () {
    $.getJSON("{{ url }}", function (data) {

        // create the chart
        $('#chart-{{ title|replace(" ", "") }}').highcharts('StockChart', {
            chart: {
                alignTicks: true
            },

            rangeSelector: {
                inputEnabled: $('#chart-{{ title|replace(" ", "") }}').width() > 480,
                selected: 1
            },

            series: [{
                type: 'line',
                name: 'Total',
                data: data,
            }],

            xAxis: {
                ordinal: false
            }
        });
    });
});
</script>
    </div>
</div>
{% endmacro %}

{% macro create_graph_panel(x, y, title) %}
<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">{{ title }}</h3>
  </div>
  <div class="panel-body">
    <canvas id="chart-{{ title|replace(" ", "") }}" height="400"></canvas>

<script>
  var data = {
    labels: {{ x|safe }},
    datasets: [
        {
          strokeColor: "rgba(151,187,205,1)",
          pointColor: "rgba(151,187,205,1)",
          pointStrokeColor: "#fff",
          data: {{ y }}
        }
    ]
  };
  var options = {

    ///Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines : true,

    //String - Colour of the grid lines
    //scaleGridLineColor : "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth : 1,

    //Boolean - Whether the line is curved between points
    bezierCurve : false,

    //Number - Tension of the bezier curve between points
    //bezierCurveTension : 0.4,

    //Boolean - Whether to show a dot for each point
    pointDot : true,

    //Number - Radius of each point dot in pixels
    pointDotRadius : 3,

    //Number - Pixel width of point dot stroke
    pointDotStrokeWidth : 1,

    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 2,

    //Boolean - Whether to show a stroke for datasets
    datasetStroke : true,

    //Number - Pixel width of dataset stroke
    datasetStrokeWidth : 2,

    //Boolean - Whether to fill the dataset with a colour
    datasetFill : false,

    //String - A legend template

  };

  function fitToContainer(canvas){
    canvas.style.width='100%';
    canvas.width  = canvas.offsetWidth;
  }

  var ctx = document.getElementById("chart-{{ title|replace(" ", "") }}").getContext("2d");
  fitToContainer(document.getElementById("chart-{{ title|replace(" ", "") }}"));
  var myLineChart = new Chart(ctx).Line(data, options);
</script>
    </div>
</div>
{% endmacro %}